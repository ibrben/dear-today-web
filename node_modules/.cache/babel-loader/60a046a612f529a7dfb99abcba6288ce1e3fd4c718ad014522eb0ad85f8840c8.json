{"ast":null,"code":"var _jsxFileName = \"/Users/ibr/Desktop/projects/prjDearToday/deartoday_web/src/components/LanguageContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Define translations for each supported language\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst translations = {\n  en: {\n    navTravel: 'Travel',\n    navEvents: 'Upcoming Events',\n    navAboutUs: 'About Us'\n    // Add more translations as needed\n  },\n  th: {\n    navTravel: 'การเดินทาง',\n    navEvents: 'กิจกรรมที่ต่อไป',\n    navAboutUs: 'รู้จักพวกเรา'\n    // Add more translations as needed\n  }\n  // You can add more languages as needed\n};\n\n// Create the context\nexport const LanguageContext = /*#__PURE__*/createContext();\n\n// Create the provider component\nexport const LanguageProvider = ({\n  children\n}) => {\n  _s();\n  // Get initial language from localStorage or default to Thai\n  const [currentLanguage, setCurrentLanguage] = useState(localStorage.getItem('language') || 'th');\n\n  // Save language choice to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('language', currentLanguage);\n    // You can also set html lang attribute here\n    document.documentElement.lang = currentLanguage;\n  }, [currentLanguage]);\n\n  // Function to toggle between languages\n  const toggleLanguage = () => {\n    setCurrentLanguage(currentLanguage === 'th' ? 'en' : 'th');\n  };\n\n  // Function to get translations\n  const translate = key => {\n    return translations[currentLanguage][key] || key;\n  };\n\n  // Create the value object with all needed properties and functions\n  const contextValue = {\n    language: {\n      current: currentLanguage,\n      toggleLanguage\n    },\n    translate\n  };\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(LanguageProvider, \"4Pca+feIluNFz2hevKB0m9bTc/M=\");\n_c = LanguageProvider;\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","translations","en","navTravel","navEvents","navAboutUs","th","LanguageContext","LanguageProvider","children","_s","currentLanguage","setCurrentLanguage","localStorage","getItem","setItem","document","documentElement","lang","toggleLanguage","translate","key","contextValue","language","current","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ibr/Desktop/projects/prjDearToday/deartoday_web/src/components/LanguageContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\n// Define translations for each supported language\nconst translations = {\n  en: {\n    navTravel: 'Travel',\n    navEvents: 'Upcoming Events',\n    navAboutUs: 'About Us',\n    // Add more translations as needed\n  },\n  th: {\n    navTravel: 'การเดินทาง',\n    navEvents: 'กิจกรรมที่ต่อไป',\n    navAboutUs: 'รู้จักพวกเรา',\n    // Add more translations as needed\n  }\n  // You can add more languages as needed\n};\n\n// Create the context\nexport const LanguageContext = createContext();\n\n// Create the provider component\nexport const LanguageProvider = ({ children }) => {\n  // Get initial language from localStorage or default to Thai\n  const [currentLanguage, setCurrentLanguage] = useState(\n    localStorage.getItem('language') || 'th'\n  );\n\n  // Save language choice to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('language', currentLanguage);\n    // You can also set html lang attribute here\n    document.documentElement.lang = currentLanguage;\n  }, [currentLanguage]);\n\n  // Function to toggle between languages\n  const toggleLanguage = () => {\n    setCurrentLanguage(currentLanguage === 'th' ? 'en' : 'th');\n  };\n\n  // Function to get translations\n  const translate = (key) => {\n    return translations[currentLanguage][key] || key;\n  };\n\n  // Create the value object with all needed properties and functions\n  const contextValue = {\n    language: {\n      current: currentLanguage,\n      toggleLanguage,\n    },\n    translate,\n  };\n\n  return (\n    <LanguageContext.Provider value={contextValue}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAG;EACnBC,EAAE,EAAE;IACFC,SAAS,EAAE,QAAQ;IACnBC,SAAS,EAAE,iBAAiB;IAC5BC,UAAU,EAAE;IACZ;EACF,CAAC;EACDC,EAAE,EAAE;IACFH,SAAS,EAAE,YAAY;IACvBC,SAAS,EAAE,iBAAiB;IAC5BC,UAAU,EAAE;IACZ;EACF;EACA;AACF,CAAC;;AAED;AACA,OAAO,MAAME,eAAe,gBAAGX,aAAa,CAAC,CAAC;;AAE9C;AACA,OAAO,MAAMY,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAChD;EACA,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CACpDgB,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAI,IACtC,CAAC;;EAED;EACAhB,SAAS,CAAC,MAAM;IACde,YAAY,CAACE,OAAO,CAAC,UAAU,EAAEJ,eAAe,CAAC;IACjD;IACAK,QAAQ,CAACC,eAAe,CAACC,IAAI,GAAGP,eAAe;EACjD,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC;;EAErB;EACA,MAAMQ,cAAc,GAAGA,CAAA,KAAM;IAC3BP,kBAAkB,CAACD,eAAe,KAAK,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC;EAC5D,CAAC;;EAED;EACA,MAAMS,SAAS,GAAIC,GAAG,IAAK;IACzB,OAAOpB,YAAY,CAACU,eAAe,CAAC,CAACU,GAAG,CAAC,IAAIA,GAAG;EAClD,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG;IACnBC,QAAQ,EAAE;MACRC,OAAO,EAAEb,eAAe;MACxBQ;IACF,CAAC;IACDC;EACF,CAAC;EAED,oBACEpB,OAAA,CAACO,eAAe,CAACkB,QAAQ;IAACC,KAAK,EAAEJ,YAAa;IAAAb,QAAA,EAC3CA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACpB,EAAA,CArCWF,gBAAgB;AAAAuB,EAAA,GAAhBvB,gBAAgB;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}